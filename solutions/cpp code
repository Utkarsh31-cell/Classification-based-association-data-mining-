#include <bits/stdc++.h>
using namespace std;
/*
item                symbol
youth   ->            1  
middle_age ->         2
senior ->             3
high  ->              4  
medium ->             5
low ->                6
no_student   ->      7  
yes_student ->        8
fair ->               9
excellent ->          10
*/
//for buys computer yes or no two functions are there sepeartely find
int main() {
int i, j, t1, k, l, m, f, f1, f2, f3,n,in;
  //enter number of items want to purchase
  cout<<"Enter number of Tid\n";
  cin>>n;
  int a[n][n],b[n][n];
  string s;
  map<string,int>mx;
  //here n is 14
  //Initial item-purchase
  int buy;
  vector<int>dd;
  //buy either 0 or 1 
memset(a,0,sizeof(a));
memset(b,0,sizeof(b));
  
  for (i = 0; i < n; i++) {
    cout << "\n Enter items from purchase " << i + 1 << ":";
    for (j = 0; j < 5; j++) {
      //cin >> in;
      cin>>s;
      if(s=="youth"){
          in=1;
      }else if(s=="middle_age"){
          in=2;
      }else if(s=="senior"){
          in=3;
      }else if(s=="high"){
          in=4;
      }else if(s=="medium"){
          in=5;
      }else if(s=="low"){
          in=6;
      }else if(s=="no_studnent"){
          in=7;
      }else if(s=="yes_student"){
          in=8;
      }else if(s=="fair"){
          in=9;
      }else if(s=="excellent"){
          in=10;
      }else if(s=="yes"){
          in=11;
      }else if(s=="no"){
          in=0;
      }
    dd.push_back(in);  
    }
    if(dd[4]==0){
       for(int pp=0;pp<4;pp++){
           b[i][pp]=dd[pp];
       }
    }else{
        for(int pp=0;pp<4;pp++){
           a[i][pp]=dd[pp];
       } 
    }
    dd.clear();
  }
 
  //Defining minimum level for acceptence
  int min;
  cout << "\n Enter minimum support level";
  cin >> min;    
 
  //Printing initial input
  cout << "\nInitial Input:\n";
  cout << "\nTrasaction\tItems\n";
  cout<<"If they belong to YES set\n";
  for (i = 0; i < n; i++) {
    cout << i + 1 << ":\t";
    for (j = 0; j < 4; j++) {
        if(a[i][j]){
        cout<<a[i][j];
        }
        cout<<" ";
    }
    cout << "\n";
  }
  cout<<"If they belong to NO set\n";
    for (i = 0; i < n; i++) {
    cout << i + 1 << ":\t";
    for (j = 0; j < 4; j++) {
        if(b[i][j]){
      cout << b[i][j];
        }
        cout<<" ";
    }
    cout << "\n";
  }
  cout << "\nAssume minimum support : " << min;
 
  //First pass
  int l1[n],l2[n];
 memset(l1,0,sizeof(l1));
 memset(l1,0,sizeof(l1));
  for (i = 0; i < n; i++) {
    t1 = 0;
    for (j = 0; j < n; j++) {
      for (k = 0; k < n; k++) {
        if (a[j][k] == i + 1) {
          t1++;
        }
      }
    }
    l1[i] = t1;
  }
    for (i = 0; i < n; i++) {
    t1 = 0;
    for (j = 0; j < n; j++) {
      for (k = 0; k < n; k++) {
        if (b[j][k] == i + 1) {
          t1++;
        }
      }
    }
    l2[i] = t1;
  }
 
  //Printing first pass
  cout << "\n\nGenerating C1 from data\n";
  cout<<"For YES sub_buys value\n";
  for (i = 0; i < n; i++) {
    cout << i + 1 << ": " << l1[i] << "\n";
  }
  cout<<"For NO sub_buys value\n";
   for (i = 0; i < n; i++) {
    cout << i + 1 << ": " << l2[i] << "\n";
  }
  //Second pass
 
  //Counting number of possibilities for pass2
  int p2pcount = 0;
  int p2items[n];
  int p2pos = 0;
  
  
  int p2pcount1 = 0;
  int p2items1[n];
  int p2pos1 = 0;
  
  for (i = 0; i < n; i++) {
    if (l1[i] >= min) {
      p2pcount++;
      p2items[p2pos] = i;
      p2pos++;
    }
  }
  for (i = 0; i < n; i++) {
    if (l2[i] >= min) {
      p2pcount1++;
      p2items1[p2pos1] = i;
      p2pos1++;
    }
  }
 
 
  //Printing selected items for second pass
  cout <<"\nGenerating L1 From C1\n";
  cout<<"For YES sub_buys value\n";
  for (i = 0; i < p2pos; i++) {
    cout << p2items[i] + 1 << "  " << l1[p2items[i]] << "\n";
  }
  cout<<"For NO sub_buys value\n";
  for (i = 0; i < p2pos1; i++) {
    cout << p2items1[i] + 1 << " " << l2[p2items1[i]] << "\n";
  }
  //Joining items
  int l21[n][3];
  int l21t1;          //will hold first item for join
  int l21t2;          //will hold second item for join
  int l21pos1 = 0;    //position pointer in l21 array
  int l21ocount = 0;  //product join occruance counter
  int l21jcount = 0;  //join counter
  
  
  int l22[n][3];
  int l22t1;          //will hold first item for join
  int l22t2;          //will hold second item for join
  int l22pos1 = 0;    //position pointer in l22 array
  int l22ocount = 0;  //product join occruance counter
  int l22jcount = 0;
  memset(l21,0,sizeof(l21));
  memset(l22,0,sizeof(l22));
  //for part 1 yes
  for (i = 0; i < p2pcount-1; i++) {
    for (j = i + 1; j < p2pcount; j++) {
      l21t1 = p2items[i] + 1;
      l21t2 = p2items[j] + 1;
      if (l21t1 == l21t2) {
                                      //it is self join
        continue;
      }
 
                                      //join the elements
      l21[l21pos1][0] = l21t1;
      l21[l21pos1][1] = l21t2;
 
      l21jcount++;
 
                                      //count occurances
      l21ocount = 0;                   //reset counter
      for (k = 0; k < n; k++) {
        f1 = f2 = 0;                  //resetting flag
 
                                      //scan a purcahse
        for (l = 0; l < 4; l++) {
          if (l21t1 == a[k][l]) {
                                      //one of the element found
            f1 = 1;
          }
          if (l21t2 == a[k][l]) {
                                      //second elements also found
            f2 = 1;
          }
        }
 
                                      //one purchase scanned
        if (f1 == 1 && f2 == 1)       //both items are present in purchase
        {
          l21ocount++;
        }
      }
 
                                          //assign count
      l21[l21pos1][2] = l21ocount;
 
      l21pos1++;
    }
  }
 
  
  
  //for part2 NO 
   
   for (i = 0; i < p2pcount1-1; i++) {
    for (j = i + 1; j < p2pcount1; j++) {
      l22t1 = p2items1[i] + 1;
      l22t2 = p2items1[j] + 1;
      if (l22t1 == l22t2) {
                                      //it is self join
        continue;
      }
 
                                      //join the elements
      l22[l22pos1][0] = l22t1;
      l22[l22pos1][1] = l22t2;
 
      l22jcount++;
 
                                      //count occurances
      l22ocount = 0;                   //reset counter
      for (k = 0; k < n; k++) {
        f1 = f2 = 0;                  //resetting flag
 
                                      //scan a purcahse
        for (l = 0; l < 4; l++) {
          if (l22t1 == b[k][l]) {
                                      //one of the element found
            f1 = 1;
          }
          if (l22t2 == b[k][l]) {
                                      //second elements also found
            f2 = 1;
          }
        }
 
                                      //one purchase scanned
        if (f1 == 1 && f2 == 1)       //both items are present in purchase
        {
          l22ocount++;
        }
      }
 
                                          //assign count
      l22[l22pos1][2] = l22ocount;
 
      l22pos1++;
    }
  }
 
   
   
   
   
                                           //Printing second pass

 
   
                                           //Printing second pass
  cout << "\n\nGenerating L2\n";
  for (i = 0; i < l21jcount; i++) {
    for (j = 0; j < 3; j++) {
     if(l21[i][j]){
          cout <<l21[i][j] ;
      }
      cout<<" ";
    }
    cout << "\n";
  }
   cout << "\n\n";
  for (i = 0; i < l22jcount; i++) {
    for (j = 0; j < 3; j++) {
      if(l22[i][j]){
          cout << l22[i][j];
      }
      cout<<" ";
    }
    cout << "\n";
  }
                                            //Third pass
 
 
  int p3pcount = 0;
  int p3items[n] ;
  
  int p3pcount1 = 0;
  int p3items1[n] ;
  for(int xx=0;xx<n;xx++){
      p3items[xx]=-1;
  }
  for(int xx=0;xx<n;xx++){
      p3items1[xx]=-1;
  }
  int p3pos = 0;
  int p3pos1 = 0;
  for (i = 0; i < n; i++) {
    if (l21[i][2] >= min) {
      f = 0;
 
      for (j = 0; j < n; j++) {
        if (p3items[j] == l21[i][0]) {
          f = 1;
        }
      }
      if (f != 1) {
        p3items[p3pos] = l21[i][0];
        p3pos++;
        p3pcount++;
      }
 
      f = 0;
      for (j = 0; j < n; j++) {
        if (p3items[j] == l21[i][1]) {
          f = 1;
        }
      }
      if (f != 1) {
        p3items[p3pos] = l21[i][1];
        p3pos++;
        p3pcount++;
      }
    }
  }
 
 //part 2
 
  for (i = 0; i < n; i++) {
    if (l22[i][2] >= min) {
      f = 0;
 
      for (j = 0; j < n; j++) {
        if (p3items1[j] == l22[i][0]) {
          f = 1;
        }
      }
      if (f != 1) {
        p3items1[p3pos1] = l22[i][0];
        p3pos1++;
        p3pcount1++;
      }
 
      f = 0;
      for (j = 0; j < n; j++) {
        if (p3items1[j] == l22[i][1]) {
          f = 1;
        }
      }
      if (f != 1) {
        p3items1[p3pos1] = l22[i][1];
        p3pos1++;
        p3pcount1++;
      }
    }
  }
 
 
 
 
                                                       //Joining
  int l32[n][4];
  int l32ocount = 0;                                   //occurance counter
  int l32jcount = 0;                                   //join counter
 
 
   int l31[n][4];
  int l31ocount = 0;                                   //occurance counter
  int l31jcount = 0;     
   memset(l31,0,sizeof(l31));                       
   memset(l32,0,sizeof(l32)); 
  for (i = 0; i < p3pcount; i++) {
    for (j = i + 1; j < p3pcount; j++) {
      for (k = j + 1; k < p3pcount; k++) {
        l31[i][0] = p3items[i];
        l31[i][1] = p3items[j];
        l31[i][2] = p3items[k];
 
        l31jcount++;
 
                                                       //count occurances
        l31ocount = 0;                                  //reset counter
        for (k = 0; k < n; k++) {
          f1 = f2 = f3 = 0;                            //resetting flag
 
                                                       //scan a purcahse
          for (l = 0; l < 4; l++) {
            if (l31[i][0] == a[k][l]) {
                                                       //one of the element found
              f1 = 1;
            }
            if (l31[i][1] == a[k][l]) {
                                                        //second elements also found
              f2 = 1;
            }
            if (l31[i][2] == a[k][l]) {
                                                         //third element also found
              f3 = 1;
            }
          }
 
                                                         //one purchase scanned
          if (f1 == 1 && f2 == 1 && f3 == 1)             //all items are present in purchase
          { 
            l31ocount++;
          }
        }
 
                                                          //assign count
        l31[i][3] = l31ocount;
      }
    }
  }
  //part 2 NO 
  
  for (i = 0; i < p3pcount1; i++) {
    for (j = i + 1; j < p3pcount1; j++) {
      for (k = j + 1; k < p3pcount1; k++) {
        l32[i][0] = p3items1[i];
        l32[i][1] = p3items1[j];
        l32[i][2] = p3items1[k];
 
        l32jcount++;
 
                                                       //count occurances
        l32ocount = 0;                                  //reset counter
        for (k = 0; k < n; k++) {
          f1 = f2 = f3 = 0;                            //resetting flag
 
                                                       //scan a purcahse
          for (l = 0; l < 4; l++) {
            if (l32[i][0] == a[k][l]) {
                                                       //one of the element found
              f1 = 1;
            }
            if (l32[i][1] == a[k][l]) {
                                                        //second elements also found
              f2 = 1;
            }
            if (l32[i][2] == a[k][l]) {
                                                         //third element also found
              f3 = 1;
            }
          }
 
                                                         //one purchase scanned
          if (f1 == 1 && f2 == 1 && f3 == 1)             //all items are present in purchase
          { 
            l32ocount++;
          }
        }
 
                                                          //assign count
        l32[i][3] = l32ocount;
      }
    }
  }
 
     map<int,int>mp;
      
                                             //Printing second pass
  cout << "\n\nGenerating L3\n";
  for (i = 0; i < l31jcount; i++) {
    for (j = 0; j < 4; j++) {
     if(l31[i][j]<=10&&l31[i][j]>0){
    mp[l31[i][j]]++;
    }
     //cout<<" ";
    }
    //cout << "\n";
  }
  for (i = 0; i < l32jcount; i++) {
    for (j = 0; j < 4; j++) {
        if(l32[i][j]<=10&&l32[i][j]>0){
     // cout << l32[i][j];
     mp[l32[i][j]]++;
    }
   // cout<<" ";
    }
   // cout << "\n";
  }
 map<int,int>::iterator itr=mp.begin();
 while(itr!=mp.end()){
     cout<<itr->first<<" ";
     itr++;
 }
 
}
 /*input new
 14
youth high no_student fair no
youth high no_student excellent  no
middle_age high  no_student fair yes
senior medium  no_student fair yes
senior low  yes_student fair yes
senior low  yes_student excellent no
middle_age low  yes_student excellent yes
youth medium no_student fair  no
youth low yes_student fair  yes
senior medium yes_student fair  yes
youth medium yes_student excellent  yes
middle_age medium  no_student excellent yes
middle_age high  yes_student fair yes
senior medium no_student excellent no
 2

output new
Enter number of Tid

 Enter items from purchase 1:
 Enter items from purchase 2:
 Enter items from purchase 3:
 Enter items from purchase 4:
 Enter items from purchase 5:
 Enter items from purchase 6:
 Enter items from purchase 7:
 Enter items from purchase 8:
 Enter items from purchase 9:
 Enter items from purchase 10:
 Enter items from purchase 11:
 Enter items from purchase 12:
 Enter items from purchase 13:
 Enter items from purchase 14:
 Enter minimum support level
Initial Input:

Trasaction	Items
If they belong to YES set
1:	    
2:	    
3:	2 4 4 9 
4:	3 5 5 9 
5:	3 6 8 9 
6:	    
7:	2 6 8 10 
8:	    
9:	1 6 8 9 
10:	3 5 8 9 
11:	1 5 8 10 
12:	2 5 5 10 
13:	2 4 8 9 
14:	    
If they belong to NO set
1:	1 4 4 9 
2:	1 4 4 10 
3:	    
4:	    
5:	    
6:	3 6 8 10 
7:	    
8:	1 5 5 9 
9:	    
10:	    
11:	    
12:	    
13:	    
14:	3 5 5 10 

Assume minimum support : 2

Generating C1 from data
For YES sub_buys value
1: 2
2: 4
3: 3
4: 3
5: 6
6: 3
7: 0
8: 6
9: 6
10: 3
11: 0
12: 0
13: 0
14: 0
For NO sub_buys value
1: 3
2: 0
3: 2
4: 4
5: 4
6: 1
7: 0
8: 1
9: 2
10: 3
11: 0
12: 0
13: 0
14: 0

Generating L1 From C1
For YES sub_buys value
1  2
2  4
3  3
4  3
5  6
6  3
8  6
9  6
10  3
For NO sub_buys value
1 3
3 2
4 4
5 4
9 2
10 3


Generating L2
1 2  
1 3  
1 4  
1 5 1 
1 6 1 
1 8 2 
1 9 1 
1 10 1 
2 3  
2 4 2 
2 5 1 
2 6 1 
2 8 2 
2 9 2 
2 10 2 
3 4  
3 5 2 
3 6 1 
3 8 2 
3 9 3 
3 10  
4 5  
5 1 1 
5 6  
5 2 1 
5 2 1 
6 1 1 
6 2 1 
6 2 1 
1 6 1 
1 2  
1 2  
6 2 1 
6 2 1 


3 4  
3 5 1 
3 1  
3 4  
3 6 1 
4 5  
4 1 2 
4 6  
5 1 1 
5 4  
5 6  
1 4 2 
1 6  
4 6  


Generating L3
1 2 4 8 9 
 */

